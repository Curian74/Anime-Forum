@using WibuBlog.Helpers
@using WibuBlog.ViewModels.Ticket
@using Domain.ValueObjects.Enums;
@model TicketsVM

<link rel="stylesheet" href="~/fontawesome/css/all.css" />
<link rel="stylesheet" href="~/css/postDetail.css" />
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.17.2/dist/sweetalert2.min.css" rel="stylesheet">

<div class="container-fluid">
	<div class="card">
		<div class="card-header bg-primary text-white">
			<h4 class="mb-0">Ticket Management</h4>
		</div>
		<div class="card-body">
			<div class="row mb-3">
				<div class="col-md-4">
					<select class="form-select" id="statusFilter" name="FilterBy">
						<option value="">All Statuses</option>
						<option value="pending">Pending</option>
						<option value="approved">Approved</option>
						<option value="rejected">Rejected</option>
					</select>
				</div>
				<div class="col-md-4">
					<select class="form-select" id="tagFilter" name="TagFilter">
						<option value="">All Tags</option>
						<option value="#BannedAccount">#BannedAccount</option>
						<option value="#HelpCreatePost">#HelpCreatePost</option>
						<option value="#TechnicalIssue">#TechnicalIssue</option>
					</select>
				</div>
				<div class="col-md-4">
					<select class="form-select" id="sortBy" name="OrderBy">
						<option value="CreatedAt-false">Newest First</option>
						<option value="CreatedAt-true">Oldest First</option>
					</select>
				</div>
			</div>

			@if (Model?.Tickets?.Items != null && Model.Tickets.Items.Any())
			{
				<div class="table-responsive">
					<table class="table table-striped table-hover">
						<thead class="table-light">
							<tr>
								<th>#</th>
								<th>Username</th>
								<th>Email</th>
								<th>Tag</th>
								<th>Content</th>
								<th>Submitted</th>
								<th>Status</th>
								<th>Approved at</th>
								<th>Note</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody id="reportsTableBody">
							@{
								var index = 1;
							}
							@foreach (var ticket in Model.Tickets.Items)
							{
								<tr data-ticket-id="@ticket.Id">
									<td>@index</td>
									<td>@ticket.User.UserName</td>
									<td>@ticket.Email</td>
									<td>@ticket.Tag</td>
									<td>
										@if (ticket.Content != null && ticket.Content.Length > 50)
										{
											@(ticket.Content.Substring(0, 30) + "...")
										}
										else
										{
											@ticket.Content
										}
									</td>
									<td>@ticket.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
									<td>
										@switch (ticket.Status)
										{
											case TicketStatusEnum.TicketStatus.Approved:
												<span class="badge bg-success">Approved</span>
												break;
											case TicketStatusEnum.TicketStatus.Rejected:
												<span class="badge bg-danger">Rejected</span>
												break;
											default:
												<span class="badge bg-warning">Pending</span>
												break;
										}
									</td>
									<td>@{
											if (ticket.Status == TicketStatusEnum.TicketStatus.Approved || ticket.Status == TicketStatusEnum.TicketStatus.Rejected)
											{
												@ticket.ApprovedAt
											}
										}
									</td>
									<td>@(ticket.Note ?? "N/A")</td>
									
									<td>
										<a href="#"
										   class="btn btn-info view-details-btn"
										   title="View Ticket"
										   data-ticket-id="@ticket.Id"
										   onclick="event.preventDefault();">
											<i class="fas fa-eye"></i> View
										</a>
										@if (ticket.Status == TicketStatusEnum.TicketStatus.Pending)
										{
											<div class="btn-group btn-group-sm" role="group">
												<button type="button"
														class="btn btn-success approve-btn"
														data-ticket-id="@ticket.Id"
														title="Approve Ticket">
													<i class="fas fa-check"></i> Approve
												</button>
												<button type="button"
														class="btn btn-danger reject-btn"
														data-ticket-id="@ticket.Id"
														title="Reject Ticket">
													<i class="fas fa-times"></i> Reject
												</button>
											</div>
										}
									</td>
								</tr>

								index++;
							}
						</tbody>
					</table>
				</div>

				@* Pagination *@
				@if (Model.Tickets.TotalPages > 1)
				{
					<nav aria-label="Ticket pagination">
						<ul class="pagination pagination-sm justify-content-center">
							@if (Model.Tickets.PageNumber > 1)
							{
								<li class="page-item me-2">
									<a class="page-link"
									   asp-action="ViewTickets"
									   asp-route-FilterBy="@Context.Request.Query["FilterBy"]"
									   asp-route-TagFilter="@Context.Request.Query["TagFilter"]"
									   asp-route-OrderBy="@Context.Request.Query["OrderBy"]"
									   asp-route-Descending="@Context.Request.Query["Descending"]"
									   asp-route-Page="@(Model.Tickets.PageNumber - 1)"
									   asp-route-pageSize="@Model.Tickets.PageSize"
									   aria-label="Previous">
										<span aria-hidden="true">Prev</span>
									</a>
								</li>
							}

							@for (int i = 1; i <= Model.Tickets.TotalPages; i++)
							{
								<li class="page-item @(i == Model.Tickets.PageNumber ? "active" : "")">
									<a class="page-link"
									   asp-action="ViewTickets"
									   asp-route-FilterBy="@Context.Request.Query["FilterBy"]"
									   asp-route-OrderBy="@Context.Request.Query["OrderBy"]"
									   asp-route-Descending="@Context.Request.Query["Descending"]"
									   asp-route-Page="@i"
									   asp-route-pageSize="@Model.Tickets.PageSize">
										@i
									</a>
								</li>
							}

							@if (Model.Tickets.PageNumber < Model.Tickets.TotalPages)
							{
								<li class="page-item ms-2">
									<a class="page-link"
									   asp-action="ViewTickets"
									   asp-route-FilterBy="@Context.Request.Query["FilterBy"]"
									   asp-route-OrderBy="@Context.Request.Query["OrderBy"]"
									   asp-route-Descending="@Context.Request.Query["Descending"]"
									   asp-route-Page="@(Model.Tickets.PageNumber + 1)"
									   asp-route-pageSize="@Model.Tickets.PageSize"
									   aria-label="Next">
										<span aria-hidden="true">Next</span>
									</a>
								</li>
							}
						</ul>
					</nav>
				}
			}
			else
			{
				<div class="alert alert-info text-center" role="alert">
					<i class="fas fa-info-circle"></i> No tickets found.
				</div>
			}
		</div>
	</div>
</div>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.17.2/dist/sweetalert2.all.min.js"></script>
	<script>

				function getCookie(name) {
			let cookieArr = document.cookie.split("; ");
			for (let i = 0; i < cookieArr.length; i++) {
				let cookiePair = cookieArr[i].split("=");
				if (cookiePair[0] === name) {
					return decodeURIComponent(cookiePair[1]);
				}
			}
			return null;
		}

		$(document).ready(function () {
			let currentTicketId = null;
			let currentAction = null;

					function preserveFilterSelection() {
			const urlParams = new URLSearchParams(window.location.search);
			const filterBy = urlParams.get('FilterBy') || "";
			const tagFilter = urlParams.get('TagFilter') || "";
			const orderBy = urlParams.get('OrderBy') || "CreatedAt";
			const descending = urlParams.get('Descending') === "true";

			$('#statusFilter').val(filterBy);
			$('#tagFilter').val(tagFilter);
			$('#sortBy').val(`${orderBy}-${descending}`);
		}

			preserveFilterSelection();

					$(document).on('click', '.approve-btn, .reject-btn', function () {
			currentTicketId = $(this).data('ticket-id');
			currentAction = $(this).hasClass('approve-btn');

			Swal.fire({
				title: 'Add Note (Optional)',
				input: 'textarea',
				inputLabel: 'Optional Note',
				inputPlaceholder: 'Type your note here...',
				showCancelButton: true,
				confirmButtonText: 'Submit',
				confirmButtonColor: currentAction ? '#28a745' : '#dc3545',
				cancelButtonText: 'Cancel',
				inputAttributes: {
					'aria-label': 'Type your optional note here'
				}
			}).then((result) => {
				if (result.isConfirmed) {
					const note = result.value || null;

					$.ajax({
						url: `https://localhost:7186/api/Ticket/ApproveTicket/${currentTicketId}`,
						type: 'POST',
						contentType: 'application/json',
						data: JSON.stringify({
							ticketId: currentTicketId,
							approval: currentAction,
							note: note
						}),
						headers: {
							'Authorization': 'Bearer ' + getCookie("AnimeForumAuthToken")
						},
						success: function (response, textStatus, xhr) {
							if (xhr.status === 200) { // Check if response is 200 OK
								Swal.fire({
									title: 'Success',
									text: response.message || 'Ticket approved successfully!',
									icon: 'success',
									confirmButtonText: 'OK'
								}).then((result) => {
									if (result.isConfirmed) {
										location.reload(); // Reload the page
									}
								});
							} else {
								Swal.fire({
									title: 'Error',
									text: response.message || 'Unexpected response received.',
									icon: 'error'
								});
							}
						},
						error: function (xhr) {
							Swal.fire({
								title: 'Error',
								text: xhr.responseJSON?.message || 'An unexpected error occurred.',
								icon: 'error'
							});
						}
					});
				}
			});
		});

			function debounce(func, delay) {
				let timeoutId;
				return function () {
					const context = this;
					const args = arguments;
					clearTimeout(timeoutId);
					timeoutId = setTimeout(() => {
						func.apply(context, args);
					}, delay);
				};
			}

		const submitFilterForm = debounce(function () {
			const selectedStatus = $('#statusFilter').val();
			const selectedTag = $('#tagFilter').val();
			const sortValue = $('#sortBy').val().split('-');
			const descendingValue = sortValue[1];

			const form = $('<form>')
				.attr('method', 'get')
				.attr('action', '/Ticket/ViewTickets');

			$('<input>')
				.attr('type', 'hidden')
				.attr('name', 'PostCategoryId')
				.val($('select[name="PostCategoryId"]').val())
				.appendTo(form);

			$('<input>')
				.attr('type', 'hidden')
				.attr('name', 'SearchTerm')
				.val($('#searchInput').val())
				.appendTo(form);

			$('<input>')
				.attr('type', 'hidden')
				.attr('name', 'FilterBy')
				.val(selectedStatus)
				.appendTo(form);

			$('<input>')
				.attr('type', 'hidden')
				.attr('name', 'TagFilter')
				.val(selectedTag)
				.appendTo(form);

			$('<input>')
				.attr('type', 'hidden')
				.attr('name', 'OrderBy')
				.val(sortValue[0])
				.appendTo(form);

			$('<input>')
				.attr('type', 'hidden')
				.attr('name', 'Descending')
				.val(descendingValue)
				.appendTo(form);

			form.appendTo('body').submit();
		}, 300);

		$('#searchInput').on('input', submitFilterForm);
		$('#statusFilter').on('change', submitFilterForm);
		$('#tagFilter').on('change', submitFilterForm);
		$('#sortBy').on('change', submitFilterForm);

			$(document).on('click', '.page-link', function (e) {
				e.preventDefault();
				const page = new URL($(this).attr('href'), window.location.origin).searchParams.get("Page") || 1;

				const form = $('<form>')
					.attr('method', 'get')
					.attr('action', '/Ticket/Index');

				$('<input>')
					.attr('type', 'hidden')
					.attr('name', 'SearchTerm')
					.val($('#searchInput').val())
					.appendTo(form);

				$('<input>')
					.attr('type', 'hidden')
					.attr('name', 'FilterBy')
					.val($('#statusFilter').val())
					.appendTo(form);

				const sortValue = $('#sortBy').val().split('-');
				$('<input>')
					.attr('type', 'hidden')
					.attr('name', 'OrderBy')
					.val(sortValue[0])
					.appendTo(form);

				$('<input>')
					.attr('type', 'hidden')
					.attr('name', 'Descending')
					.val(sortValue[1])
					.appendTo(form);

				$('<input>')
					.attr('type', 'hidden')
					.attr('name', 'Page')
					.val(page)
					.appendTo(form);

				form.appendTo('body').submit();
			});

			$(document).on('click', '.view-details-btn', function (event) {
			event.preventDefault();
			const ticketId = $(this).data('ticket-id');

			if (!ticketId) {
				Swal.fire({
					title: 'Error',
					text: 'Invalid ticket ID.',
					icon: 'error'
				});
				return;
			}

			$.ajax({
				url: `https://localhost:7186/api/Ticket/GetTicketDetails/${ticketId}`,
				type: 'GET',
				contentType: 'application/json',
				headers: {
					'Authorization': 'Bearer ' + getCookie("AnimeForumAuthToken")
				},
				success: function (response) {
					console.log("Full Response:", response); // Debugging

					if (response?.value) {
						const ticket = response.value;
						const user = ticket.user;

						Swal.fire({
					title: 'Ticket Details',
					html: `
						<table class="swal-table" border="1" cellpadding="5" cellspacing="0" style="width:100%; text-align:left;">
							<tr><th>Username</th><td>${user?.userName || 'N/A'}</td></tr>
							<tr><th>Email</th><td>${ticket.email || 'N/A'}</td></tr>
							<tr><th>Tag</th><td>${ticket.tag || 'N/A'}</td></tr>
							<tr><th>Content</th><td>${ticket.content || 'No content available'}</td></tr>
							<tr><th>Submitted</th><td>${ticket.createdAt ? new Date(ticket.createdAt).toLocaleString() : 'N/A'}</td></tr>
							<tr><th>Status</th><td>${ticket.status === 0 ? 'Open' : 'Closed'}</td></tr>
							<tr><th>Approved at</th><td>${ticket.approvedAt ? new Date(ticket.lastModifiedAt).toLocaleString() : 'N/A'}</td></tr>
							<tr><th>Note</th><td>${ticket.note || 'No notes available'}</td></tr>
						</table>
					`,
					icon: 'info',
					confirmButtonText: 'Close'
				});
					} else {
						Swal.fire({
							title: 'Error',
							text: 'No data received from server.',
							icon: 'error'
						});
					}
				},
				error: function (xhr) {
					console.error("Error fetching ticket details:", xhr);

					Swal.fire({
						title: 'Error',
						text: xhr.responseJSON?.message || 'Unable to fetch ticket details.',
						icon: 'error'
					});
				}
			});
		});
		});
	</script>
}